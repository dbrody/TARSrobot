#! /usr/bin/env python

import rospy
import roslaunch
import time
from subprocess import Popen, PIPE

from tars_control_lib_py.control import get_model_position
from tars_control_lib_py.gazebo_helper import gazebo_delete_object
from tars_control_lib_py.level_helper import spawn_tars, spawn_cones

from tars_sim.gui import TarsSimGui

def node_def_tars():
	# node_tars = roslaunch.core.Node('tars_sample_controller_py', 'tars_sample_controller')
	node_tars = roslaunch.core.Node('tars_controller_nn', 'tars_controller_nn_node')
	return node_tars

def node_def_controller():
	# <!-- load the controllers -->
	# <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
	# 	output="screen" ns="/tars" args="joint1_position_controller joint2_position_controller joint3_position_controller joint_state_controller"/>
	node_controller = roslaunch.core.Node('controller_manager', 'spawner',
		name='controller_spawner',
		respawn=False,
		output='screen',
		namespace='/tars',
		args='joint1_position_controller joint2_position_controller joint3_position_controller joint_state_controller')
	return node_controller


class TarsSimRunner:
	def __init__(self):
		
		gui = TarsSimGui()
		gui.flip()

		rospy.init_node('TarsSim', anonymous=True)
		rospy.loginfo('TARS SIM Started.')

		time_per_sim = 10
		launch = roslaunch.scriptapi.ROSLaunch()
		launch.start()

		# gazebo_delete_all_objects()
		while not rospy.is_shutdown() and gui.isOpen():
			gazebo_delete_object('tars')
			spawn_cones()
			spawn_tars()

			node_tars = node_def_tars()
			node_controller = node_def_controller()

			process_controller = launch.launch(node_controller)
			time.sleep(0.5)
			process_tars = launch.launch(node_tars)

			rate = rospy.Rate(30)

			start_time = rospy.get_time()
			while not rospy.is_shutdown() and gui.isOpen():
				duration = rospy.get_time() - start_time
				position = get_model_position()
				if position is not None:
					rospy.loginfo('Tars (%d): %.2f, %.2f, %.2f', process_tars.is_alive(), position.x, position.y, position.z)

				gui.flip()
				rate.sleep()

				if duration > time_per_sim:
					break

			process_controller.stop()
			process_tars.stop()

		gui.exit()


if __name__ == '__main__':
	sim_runner = TarsSimRunner()

	rospy.loginfo('TARS SIM stopping.')


